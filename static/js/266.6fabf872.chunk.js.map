{"version":3,"file":"static/js/266.6fabf872.chunk.js","mappings":"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","sources":["api/apiService.ts","components/pagination/index.tsx","components/viewChanger/index.tsx","pages/Races/listView.tsx","pages/Races/cardView.tsx","pages/Races/index.tsx"],"sourcesContent":["import { Season, Race, RaceDetail } from \"../types/types\";\r\n\r\nconst BASE_URL = \"https://ergast.com/api/f1\";\r\n\r\nconst apiService = {\r\n  // Fetch all available seasons\r\n  getSeasons: async (): Promise<Season[]> => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/seasons.json`);\r\n      const data = await response.json();\r\n      return data.MRData.SeasonTable.Seasons as Season[]; // Cast to Season[]\r\n    } catch (error) {\r\n      console.error(\"Error fetching seasons:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch races for a specific season\r\n  getRacesForSeason: async (season: string): Promise<Race[]> => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${season}/races.json`);\r\n      const data = await response.json();\r\n      return data.MRData.RaceTable.Races as Race[]; // Cast to Race[]\r\n    } catch (error) {\r\n      console.error(`Error fetching races for season ${season}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch race details including drivers for a specific season and race round\r\n  getRaceDetails: async (\r\n    season: string,\r\n    round: string | undefined\r\n  ): Promise<RaceDetail[]> => {\r\n    try {\r\n      const response = await fetch(\r\n        `${BASE_URL}/${season}/${round}/results.json`\r\n      );\r\n      const data = await response.json();\r\n      return data.MRData.RaceTable.Races[0].Results as RaceDetail[]; // Cast to DriverResult[]\r\n    } catch (error) {\r\n      console.error(\r\n        `Error fetching race details for season ${season}, round ${round}:`,\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default apiService;\r\n","import * as React from \"react\";\r\n\r\ninterface PaginationProps {\r\n  currentPage: number;\r\n  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;\r\n  totalPages: number;\r\n}\r\n\r\nconst PaginationComponent: React.FC<PaginationProps> = ({ currentPage, setCurrentPage, totalPages }) => {\r\n  return (\r\n    <div className=\"flex items-center justify-center xxs:gap-2 sm:gap-4 lg:gap-[1.5rem]\">\r\n      <button\r\n        className={`${currentPage !== 1 && \"cursor-pointer\"}`}\r\n        onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n        disabled={currentPage === 1}\r\n      >\r\n        <i className=\"pi pi-chevron-circle-left responsive__icon\"></i>\r\n      </button>\r\n      <span>\r\n        Page {currentPage} of {totalPages}\r\n      </span>\r\n      <button\r\n        className={`${currentPage !== totalPages && \"cursor-pointer\"}`}\r\n        onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}\r\n        disabled={currentPage === totalPages}\r\n      >\r\n        <i className=\"pi pi-chevron-circle-right responsive__icon\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationComponent;\r\n","import * as React from \"react\";\r\n\r\ninterface ViewChangerProps {\r\n  changeView: (view: \"list\" | \"card\") => void;\r\n}\r\n\r\nconst ViewChanger: React.FC<ViewChangerProps> = ({ changeView }) => {\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      <i\r\n        onClick={() => changeView(\"list\")}\r\n        className=\"custom-target-icon pi pi-server responsive__icon\"\r\n        style={{ cursor: \"pointer\" }}\r\n      ></i>\r\n\r\n      <i\r\n        onClick={() => changeView(\"card\")}\r\n        className=\"pi pi-th-large responsive__icon\"\r\n        style={{ cursor: \"pointer\" }}\r\n      ></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewChanger;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppContext } from \"../../contexts/AppContext\";\r\n\r\nimport { Race } from \"../../types/types\";\r\n\r\n\r\ninterface ListViewProps {\r\n  race: Race;\r\n  season: string;\r\n  fetchRaces: () => Promise<void>;\r\n}\r\n\r\nconst ListView: React.FC<ListViewProps> = ({ race, season, fetchRaces }) => {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  // Check if a race is pinned based on its name\r\n  const isRacePinned = (name: string): boolean => {\r\n    return state.pinnedRaces.some((r) => r === name);\r\n  };\r\n\r\n  // Handle pinning/unpinning a race\r\n  const handlePinRace = (race: Race): void => {\r\n    if (isRacePinned(race.raceName)) {\r\n      dispatch({ type: \"UNPIN_RACE\", payload: race.raceName });\r\n    } else {\r\n      dispatch({ type: \"PIN_RACE\", payload: race.raceName });\r\n    }\r\n    fetchRaces();\r\n  };\r\n\r\n  return (\r\n    <Link to={`/season/${season}/race/${race.round}`}>\r\n      <div className=\"w-full flex gap-1 items-center xxs:p-2 sm:p-4 text-[#111827]\">\r\n        \r\n        {/* date section */}\r\n        <div className=\"flex flex-col items-center\">\r\n          <p className=\"font-semibold\">{moment(race.date).format(\"DD\")}</p>\r\n          <p className=\"font-font-medium bg-[#EDEDED] rounded-xl px-4\">\r\n            {moment(race.date).format(\"MMMM\")}\r\n          </p>\r\n          <p className=\"font-font-medium text-[#FF1E0A]\">\r\n            {moment(race.date).format(\"YYYY\")}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"border-l-2 border-dotted flex flex-col gap-1 xxs:pl-[0.75rem] xxs:ml-[0.75rem] sm:pl-8 sm:ml-8\">\r\n          <p className=\"xxs:font-bold sm:font-extrabold\">{race.raceName}</p>\r\n          <div className=\"flex items-center gap-2\">\r\n            <i\r\n              className=\"pi pi-flag-fill responsive__icon\"\r\n              style={{ color: \"\", fontStyle: \"italic\" }}\r\n            ></i>\r\n            <p>{race.Circuit.circuitName}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center gap-4 ml-auto\">\r\n          <i\r\n            onClick={() => handlePinRace(race)}\r\n            className=\"pi pi-thumbtack responsive__icon\"\r\n            style={{\r\n              color: isRacePinned(race.raceName) ? \"red\" : \"gray\",\r\n              marginLeft: \"auto\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ListView;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { useAppContext } from \"../../contexts/AppContext\";\r\nimport { Race } from \"../../types/types\";\r\n\r\ninterface CardViewProps {\r\n  race: Race;\r\n  season: string;\r\n  fetchRaces: () => Promise<void>;\r\n}\r\n\r\nconst CardView: React.FC<CardViewProps> = ({ race, season, fetchRaces }) => {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  // Check if a race is pinned based on its name\r\n  const isRacePinned = (name: string): boolean => {\r\n    return state.pinnedRaces.some((r) => r === name);\r\n  };\r\n\r\n  // Handle pinning/unpinning a race\r\n  const handlePinRace = (race: Race): void => {\r\n    if (isRacePinned(race.raceName)) {\r\n      dispatch({ type: \"UNPIN_RACE\", payload: race.raceName });\r\n    } else {\r\n      dispatch({ type: \"PIN_RACE\", payload: race.raceName });\r\n    }\r\n    fetchRaces();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex gap-1 items-center text-[#111827] xxs:p-1 sm:p-2 lg:p-4\">\r\n        <i\r\n          className=\"pi pi-flag-fill\"\r\n          style={{ color: \"\", fontStyle: \"italic\" }}\r\n        ></i>\r\n        <h2 className=\"text-xl font-bold\">{race.raceName}</h2>\r\n        <i\r\n          onClick={() => handlePinRace(race)}\r\n          className=\"pi pi-thumbtack responsive__icon \"\r\n          style={{\r\n            color: isRacePinned(race.raceName) ? \"red\" : \"gray\",\r\n            marginLeft: \"auto\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        ></i>\r\n      </div>\r\n      <hr />\r\n      <div className=\"xxs:p-2 sm:p-4 lg:p-[1.25rem]\">\r\n        <div className=\"flex gap-2\">\r\n          <p className=\"text-[#FF1E00] font-semibold\">Circuit Name:</p>\r\n          {race.Circuit.circuitName}\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <p className=\"text-[#FF1E00] font-semibold\">Date:</p>\r\n          <p className=\"font-font-medium\">\r\n            {moment(race.date).format(\"MMMM DD, YYYY\")}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <Link\r\n        className=\"m-auto mb-4 text-[#0284c7] underline-offset-1\"\r\n        to={`/season/${season}/race/${race.round}`}\r\n      >\r\n        Show details\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardView;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport apiService from \"../../api/apiService\";\r\n\r\n// Component\r\nimport ListView from \"./listView\";\r\nimport CardView from \"./cardView\";\r\nimport Loader from \"../../components/loader\";\r\nimport PaginationComponent from \"../../components/pagination\";\r\nimport ViewChanger from \"../../components/viewChanger\";\r\n\r\nimport { Race } from \"../../types/types\";\r\n\r\nconst RaceList: React.FC = () => {\r\n  const [races, setRaces] = useState<Race[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const { season } = useParams<{ season: string }>();\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const itemsPerPage = 3;\r\n  const totalPages = Math.ceil(races.length / itemsPerPage);\r\n\r\n  const [view, setView] = useState<\"card\" | \"list\">(\"card\");\r\n\r\n  const fetchRaces = async () => {\r\n    if (!season) return;\r\n    try {\r\n      const data: Race[] = await apiService.getRacesForSeason(season);\r\n\r\n      // Retrieve the pinned drivers from local storage\r\n      const pinnedDrivers: string[] = JSON.parse(\r\n        localStorage.getItem(\"pinnedRaces\") || \"[]\"\r\n      );\r\n\r\n      // Sort drivers with pinned ones at the top\r\n      const sortedDrivers = data.sort((a, b) => {\r\n        const isAPinned = pinnedDrivers.includes(a.raceName);\r\n        const isBPinned = pinnedDrivers.includes(b.raceName);\r\n\r\n        if (isAPinned && !isBPinned) return -1;\r\n        if (!isAPinned && isBPinned) return 1;\r\n        return 0;\r\n      });\r\n\r\n      setRaces(sortedDrivers);\r\n    } catch (error) {\r\n      console.error(`Failed to fetch races for season ${season}:`, error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRaces();\r\n  }, [season]);\r\n\r\n  // Function to get the data for the current page\r\n  const paginate = (races: Race[], page: number, itemsPerPage: number) => {\r\n    const start = (page - 1) * itemsPerPage;\r\n    const end = start + itemsPerPage;\r\n    return races.slice(start, end);\r\n  };\r\n\r\n  // Get the paginated data for the current page\r\n  const paginatedData = paginate(races, currentPage, itemsPerPage);\r\n\r\n  // handle list view\r\n  const changeView = (selectedView: \"card\" | \"list\") => setView(selectedView);\r\n\r\n  // loading view\r\n  if (loading) return <Loader />;\r\n\r\n  return (\r\n    <div className=\"m-auto flex flex-col items-center justify-center xxs:w-[90vw] xxs:py-[1.25em] xxs:gap-[1.25em] sm:w-[85vw] sm:py-[3.25em] sm:gap-[3.25em] lg:w-[80vw] lg:py-[3.75em] lg:gap-[3.75em] \">\r\n      <div className=\"w-full flex justify-between\">\r\n        {/* View Toggle*/}\r\n        <ViewChanger changeView={changeView} />\r\n\r\n        {/* Pagination */}\r\n        <PaginationComponent\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          totalPages={totalPages}\r\n        />\r\n      </div>\r\n\r\n      {/* List of data */}\r\n      <div className=\"flex items-center justify-center gap-4 flex-wrap w-full\">\r\n        {paginatedData.map((race) => (\r\n          <div\r\n            key={race.round}\r\n            className={`border rounded flex flex-col gap-1 ${\r\n              view === \"card\"\r\n                ? \"flex flex-col gap-1 xxs:w-full  lg:w-[calc(100%_/_3_-_1em)]\"\r\n                : \"flex w-full\"\r\n            }`}\r\n          >\r\n            {view === \"card\" ? (\r\n              <CardView race={race} season={season!} fetchRaces={fetchRaces} />\r\n            ) : (\r\n              <ListView race={race} season={season!} fetchRaces={fetchRaces} />\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceList;\r\n"],"names":["BASE_URL","getSeasons","async","response","fetch","json","MRData","SeasonTable","Seasons","error","console","getRacesForSeason","season","RaceTable","Races","getRaceDetails","round","Results","_ref","currentPage","setCurrentPage","totalPages","_jsxs","className","children","_jsx","onClick","prev","Math","max","disabled","min","changeView","style","cursor","race","fetchRaces","state","dispatch","useAppContext","isRacePinned","name","pinnedRaces","some","r","Link","to","moment","date","format","raceName","color","fontStyle","Circuit","circuitName","type","payload","handlePinRace","marginLeft","_Fragment","RaceList","races","setRaces","useState","loading","setLoading","useParams","ceil","length","view","setView","data","apiService","pinnedDrivers","JSON","parse","localStorage","getItem","sortedDrivers","sort","a","b","isAPinned","includes","isBPinned","useEffect","paginatedData","paginate","page","itemsPerPage","start","end","slice","Loader","ViewChanger","selectedView","PaginationComponent","map","CardView","ListView"],"sourceRoot":""}