{"version":3,"file":"static/js/210.503a4e89.chunk.js","mappings":"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","sources":["api/apiService.ts","components/pagination/index.tsx","components/viewChanger/index.tsx","pages/Season/index.tsx","pages/Home/index.tsx"],"sourcesContent":["import { Season, Race, RaceDetail } from \"../types/types\";\r\n\r\nconst BASE_URL = \"https://ergast.com/api/f1\";\r\n\r\nconst apiService = {\r\n  // Fetch all available seasons\r\n  getSeasons: async (): Promise<Season[]> => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/seasons.json`);\r\n      const data = await response.json();\r\n      return data.MRData.SeasonTable.Seasons as Season[]; // Cast to Season[]\r\n    } catch (error) {\r\n      console.error(\"Error fetching seasons:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch races for a specific season\r\n  getRacesForSeason: async (season: string): Promise<Race[]> => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${season}/races.json`);\r\n      const data = await response.json();\r\n      return data.MRData.RaceTable.Races as Race[]; // Cast to Race[]\r\n    } catch (error) {\r\n      console.error(`Error fetching races for season ${season}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch race details including drivers for a specific season and race round\r\n  getRaceDetails: async (\r\n    season: string,\r\n    round: string | undefined\r\n  ): Promise<RaceDetail[]> => {\r\n    try {\r\n      const response = await fetch(\r\n        `${BASE_URL}/${season}/${round}/results.json`\r\n      );\r\n      const data = await response.json();\r\n      return data.MRData.RaceTable.Races[0].Results as RaceDetail[]; // Cast to DriverResult[]\r\n    } catch (error) {\r\n      console.error(\r\n        `Error fetching race details for season ${season}, round ${round}:`,\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default apiService;\r\n","import * as React from \"react\";\r\n\r\ninterface PaginationProps {\r\n  currentPage: number;\r\n  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;\r\n  totalPages: number;\r\n}\r\n\r\nconst PaginationComponent: React.FC<PaginationProps> = ({ currentPage, setCurrentPage, totalPages }) => {\r\n  return (\r\n    <div className=\"flex items-center justify-center xxs:gap-2 sm:gap-4 lg:gap-[1.5rem]\">\r\n      <button\r\n        className={`${currentPage !== 1 && \"cursor-pointer\"}`}\r\n        onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n        disabled={currentPage === 1}\r\n      >\r\n        <i className=\"pi pi-chevron-circle-left responsive__icon\"></i>\r\n      </button>\r\n      <span>\r\n        Page {currentPage} of {totalPages}\r\n      </span>\r\n      <button\r\n        className={`${currentPage !== totalPages && \"cursor-pointer\"}`}\r\n        onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}\r\n        disabled={currentPage === totalPages}\r\n      >\r\n        <i className=\"pi pi-chevron-circle-right responsive__icon\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationComponent;\r\n","import * as React from \"react\";\r\n\r\ninterface ViewChangerProps {\r\n  changeView: (view: \"list\" | \"card\") => void;\r\n}\r\n\r\nconst ViewChanger: React.FC<ViewChangerProps> = ({ changeView }) => {\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      <i\r\n        onClick={() => changeView(\"list\")}\r\n        className=\"custom-target-icon pi pi-server responsive__icon\"\r\n        style={{ cursor: \"pointer\" }}\r\n      ></i>\r\n\r\n      <i\r\n        onClick={() => changeView(\"card\")}\r\n        className=\"pi pi-th-large responsive__icon\"\r\n        style={{ cursor: \"pointer\" }}\r\n      ></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewChanger;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport apiService from \"../../api/apiService\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Component\r\nimport Loader from \"../../components/loader\";\r\nimport PaginationComponent from \"../../components/pagination\";\r\nimport ViewChanger from \"../../components/viewChanger\";\r\n\r\n// Assets\r\nimport seasonImg from \"../../assets/seasons.png\";\r\n\r\ninterface Season {\r\n  season: string;\r\n}\r\n\r\nconst SeasonList: React.FC = () => {\r\n  const [seasons, setSeasons] = useState<Season[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const itemsPerPage = 6;\r\n  const totalPages = Math.ceil(seasons.length / itemsPerPage);\r\n\r\n  const [view, setView] = useState<\"card\" | \"list\">(\"card\");\r\n\r\n  useEffect(() => {\r\n    const fetchSeasons = async () => {\r\n      try {\r\n        const data: Season[] = await apiService.getSeasons();\r\n        setSeasons(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch seasons:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchSeasons();\r\n  }, []);\r\n\r\n  // Function to get the data for the current page\r\n  const paginate = (\r\n    seasons: Season[],\r\n    page: number,\r\n    itemsPerPage: number\r\n  ): Season[] => {\r\n    const start = (page - 1) * itemsPerPage;\r\n    const end = start + itemsPerPage;\r\n    return seasons.slice(start, end);\r\n  };\r\n\r\n  // Get the paginated data for the current page\r\n  const paginatedData = paginate(seasons, currentPage, itemsPerPage);\r\n\r\n  // handle list view\r\n  const changeView = (selectedView: \"card\" | \"list\"): void =>\r\n    setView(selectedView);\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  return (\r\n    <div className=\"m-auto flex flex-col items-center justify-center xxs:w-[90vw] xxs:py-[1.25em] xxs:gap-[1.25em] sm:w-[85vw] sm:py-[3.25em] sm:gap-[3.25em] lg:w-[80vw] lg:py-[3.75em] lg:gap-[3.75em] \">\r\n      <div className=\"w-full flex justify-between\">\r\n        {/* View Toggle*/}\r\n        <ViewChanger changeView={changeView} />\r\n\r\n        {/* Pagination */}\r\n        <PaginationComponent\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          totalPages={totalPages}\r\n        />\r\n      </div>\r\n\r\n      {/* List of data */}\r\n      <div\r\n        className={`flex items-center justify-center  flex-wrap w-full  ${\r\n          view === \"card\"\r\n            ? \"gap-8\"\r\n            : \"xxs:gap-4 sm:gap-[1.25rem] lg:gap-[1.5rem]  \"\r\n        } `}\r\n      >\r\n        {paginatedData.map((season) => (\r\n          <div\r\n            key={season.season}\r\n            className={`w-full rounded border-[#FF1E00] text-[#111827] \r\n              ${\r\n                view === \"card\"\r\n                  ? \"p-4 border-t-2 border-r-2 flex flex-col gap-4 xxs:w-[calc(100%_/_2_-_2em)] sm:w-[calc(100%_/_3_-_2em)] \"\r\n                  : \"border flex items-center justify-between w-full xxs:p-1 sm:p-2 lg:p-4 bg-gray-100\"\r\n              }`}\r\n          >\r\n            <img\r\n              className=\"xxs:w-[6rem] sm:w-[7rem] lg:w-32 \"\r\n              src={seasonImg}\r\n              alt=\"season\"\r\n            />\r\n            <p className=\"m-auto text-5xl font-extrabold italic text-[#FF1E00]\">\r\n              {season.season}\r\n            </p>\r\n\r\n            <Link\r\n              className={`text-[#0284c7] xxs:text-[0.75rem] sm:text-[1rem] sm:ml-auto ${\r\n                view === \"card\" && \"ml-auto\"\r\n              } `}\r\n              to={`/season/${season.season}`}\r\n            >\r\n              Show races\r\n            </Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonList;\r\n","import React from \"react\";\r\n\r\n// Component\r\nimport SeasonList from \"../Season\";\r\n\r\n// Assets\r\nimport landingImage from \"../../assets/landImg.jpeg\";\r\n\r\nconst Home: React.FC = () => {\r\n  return (\r\n    <div className=\"relative\">\r\n      <img\r\n        className=\"w-full xxs:h-[50vh] sm:h-[60vh] lg:h-screen\"\r\n        src={landingImage}\r\n        alt=\"landingImage\"\r\n      />\r\n      <SeasonList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["BASE_URL","getSeasons","async","response","fetch","json","MRData","SeasonTable","Seasons","error","console","getRacesForSeason","season","RaceTable","Races","getRaceDetails","round","Results","_ref","currentPage","setCurrentPage","totalPages","_jsxs","className","children","_jsx","onClick","prev","Math","max","disabled","min","changeView","style","cursor","SeasonList","seasons","setSeasons","useState","loading","setLoading","ceil","length","view","setView","useEffect","data","apiService","fetchSeasons","paginatedData","paginate","page","itemsPerPage","start","end","slice","Loader","ViewChanger","selectedView","PaginationComponent","map","src","seasonImg","alt","Link","to","Home","landingImage"],"sourceRoot":""}