{"version":3,"file":"static/js/633.238e2a97.chunk.js","mappings":"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","sources":["api/apiService.ts","pages/RaceDetails/chartSection.tsx","pages/RaceDetails/analyticsSection.tsx","pages/RaceDetails/multipleBarChart.tsx","pages/RaceDetails/index.tsx"],"sourcesContent":["import { Season, Race, RaceDetail } from \"../types/types\";\r\n\r\nconst BASE_URL = \"https://ergast.com/api/f1\";\r\n\r\nconst apiService = {\r\n  // Fetch all available seasons\r\n  getSeasons: async (): Promise<Season[]> => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/seasons.json`);\r\n      const data = await response.json();\r\n      return data.MRData.SeasonTable.Seasons as Season[]; // Cast to Season[]\r\n    } catch (error) {\r\n      console.error(\"Error fetching seasons:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch races for a specific season\r\n  getRacesForSeason: async (season: string): Promise<Race[]> => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${season}/races.json`);\r\n      const data = await response.json();\r\n      return data.MRData.RaceTable.Races as Race[]; // Cast to Race[]\r\n    } catch (error) {\r\n      console.error(`Error fetching races for season ${season}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch race details including drivers for a specific season and race round\r\n  getRaceDetails: async (\r\n    season: string,\r\n    round: string | undefined\r\n  ): Promise<RaceDetail[]> => {\r\n    try {\r\n      const response = await fetch(\r\n        `${BASE_URL}/${season}/${round}/results.json`\r\n      );\r\n      const data = await response.json();\r\n      return data.MRData.RaceTable.Races[0].Results as RaceDetail[]; // Cast to DriverResult[]\r\n    } catch (error) {\r\n      console.error(\r\n        `Error fetching race details for season ${season}, round ${round}:`,\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default apiService;\r\n","import React from \"react\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Highcharts from \"highcharts\";\r\nimport { ComparisonData } from \"../../types/types\";\r\n\r\ninterface ChartSectionProps {\r\n  comparisonDrivers: ComparisonData;\r\n}\r\n\r\nconst ChartSection: React.FC<ChartSectionProps> = ({ comparisonDrivers }) => {\r\n  /**\r\n   * Configuration options for the Highcharts column chart, customized to display\r\n   * driver comparison data for the selected metric.\r\n   */\r\n  const options: Highcharts.Options = {\r\n    chart: {\r\n      type: \"column\",\r\n    },\r\n    title: {\r\n      text: comparisonDrivers.title,\r\n      align: \"left\",\r\n    },\r\n    xAxis: {\r\n      categories: comparisonDrivers.xAxis,\r\n      crosshair: true,\r\n      accessibility: {\r\n        description: \"Drivers\",\r\n      },\r\n    },\r\n    yAxis: {\r\n      min: 0,\r\n      title: {\r\n        text: \"Metric\",\r\n      },\r\n    },\r\n    tooltip: {\r\n      valueSuffix: \" units\",\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        pointWidth: 20,\r\n        pointPadding: 0.5,\r\n        borderWidth: 0,\r\n      },\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Comparison Metric\",\r\n        data: comparisonDrivers.yAxis,\r\n        type: \"column\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\r\n};\r\n\r\nexport default ChartSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { IconField } from \"primereact/iconfield\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { InputIcon } from \"primereact/inputicon\";\r\nimport ChartSection from \"./chartSection\";\r\n\r\nimport { RaceDetail, ComparisonData } from \"../../types/types\";\r\n\r\ninterface Option {\r\n  name: string;\r\n  code: keyof RaceDetail;\r\n}\r\n\r\ninterface AnalyticsSectionProps {\r\n  raceDetails: RaceDetail[];\r\n  defaultComparisonDrivers: ComparisonData;\r\n}\r\n\r\nconst options: Option[] = [\r\n  { name: \"Points\", code: \"points\" },\r\n  { name: \"Laps\", code: \"laps\" },\r\n];\r\n\r\nconst AnalyticsSection: React.FC<AnalyticsSectionProps> = ({\r\n  raceDetails,\r\n  defaultComparisonDrivers,\r\n}) => {\r\n  const [team, setTeam] = useState<any[]>([]);\r\n  const [selectedTeam, setSelectedTeam] = useState<any[]>([]);\r\n  const [rowClick, setRowClick] = useState<boolean>(true);\r\n  const [error, setError] = useState<boolean>(false);\r\n  const [globalFilter, setGlobalFilter] = useState<string | null>(null);\r\n  const [comparisonField, setComparisonField] = useState<Option | undefined>();\r\n  const [comparison, setComparison] = useState<ComparisonData>(\r\n    defaultComparisonDrivers\r\n  );\r\n\r\n  useEffect(() => {\r\n    const result = raceDetails.map((driver) => ({\r\n      id: driver.Driver.driverId,\r\n      name: `${driver.Driver.givenName} ${driver.Driver.familyName}`,\r\n      position: driver.position,\r\n      nationality: driver.Constructor.nationality,\r\n      time: driver.Time?.millis || \"\",\r\n      points: driver.points,\r\n      laps: driver.laps,\r\n    }));\r\n    setTeam(result);\r\n  }, [raceDetails]);\r\n\r\n  const compareBetweenDrivers = (e: {\r\n    value: React.SetStateAction<Option | undefined>;\r\n  }) => {\r\n    setComparisonField(e.value);\r\n  };\r\n\r\n  /**\r\n   * Compares selected drivers based on the selected field.\r\n   */\r\n  const handelCompare = () => {\r\n    if (!comparisonField || !selectedTeam) return;\r\n\r\n    const xAxis: string[] = [];\r\n    const yAxis: number[] = [];\r\n    selectedTeam.forEach((element) => {\r\n      xAxis.push(element.name);\r\n      yAxis.push(Number(element[comparisonField.code]));\r\n    });\r\n    setComparison({\r\n      xAxis,\r\n      yAxis,\r\n      title: `Compare between drivers in ${comparisonField.name}`,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Resets the comparison settings to the default values.\r\n   */\r\n  const resetComparing = () => {\r\n    setSelectedTeam([]);\r\n    setComparisonField(undefined);\r\n    setComparison(defaultComparisonDrivers);\r\n  };\r\n\r\n  /**\r\n   * Renders the search header component for filtering team data.\r\n   * @returns JSX.Element - The header component for the DataTable.\r\n   */\r\n  const renderHeader = () => {\r\n    return (\r\n      <div className=\"flex gap-2 items-center justify-between\">\r\n        <div className=\"flex justify-between items-center ml-auto\">\r\n          <IconField iconPosition=\"left\">\r\n            <InputIcon className=\"pi pi-search\" />\r\n            <InputText\r\n              type=\"search\"\r\n              onInput={(e) =>\r\n                setGlobalFilter((e.target as HTMLInputElement).value)\r\n              }\r\n              placeholder=\"Search by Name...\"\r\n            />\r\n          </IconField>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const header = renderHeader();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4 w-full\">\r\n      <div className=\"bg-[#F9FAFB] xxs:p-2 sm:p-4 rounded w-full flex xxs:flex-col sm:flex-row justify-between items-center gap-8 border\">\r\n        <div className=\"flex mr-auto gap-1 xxs:flex-col sm:flex-row sm:items-center  \">\r\n          <p>Compare Between Drivers in</p>\r\n          <Dropdown\r\n            value={comparisonField}\r\n            onChange={compareBetweenDrivers}\r\n            options={options}\r\n            optionLabel=\"name\"\r\n            placeholder=\"Select a Comparison\"\r\n            disabled={!selectedTeam || selectedTeam.length < 2}\r\n          />\r\n          {error && <p>Select at least two competitor</p>}\r\n        </div>\r\n        <div className=\"flex gap-2 ml-auto \">\r\n          <Button\r\n            onClick={handelCompare}\r\n            className=\"\"\r\n            label=\"Compare\"\r\n            rounded\r\n            size=\"small\"\r\n            disabled={!selectedTeam || selectedTeam.length < 2}\r\n          />\r\n          <Button\r\n            onClick={resetComparing}\r\n            label=\"Reset\"\r\n            severity=\"danger\"\r\n            size=\"small\"\r\n            rounded\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"flex xxs:flex-col xxs:gap-4 lg:flex-row justify-between items-center\">\r\n        <div className=\"xxs:w-full lg:w-[48%] border rounded\">\r\n          <DataTable\r\n            header={header}\r\n            value={team}\r\n            paginator\r\n            rows={5}\r\n            globalFilter={globalFilter || undefined}\r\n            selectionMode={rowClick ? undefined : \"checkbox\"}\r\n            selection={selectedTeam}\r\n            onSelectionChange={(e: any) => setSelectedTeam(e.value)}\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              selectionMode=\"multiple\"\r\n              headerStyle={{ width: \"0.25rem\" }}\r\n            />\r\n            <Column\r\n              field=\"position\"\r\n              header=\"Position\"\r\n              headerStyle={{ width: \"1rem\" }}\r\n            />\r\n            <Column field=\"name\" header=\"Name\" />\r\n            <Column field=\"nationality\" header=\"Nationality\" />\r\n          </DataTable>\r\n        </div>\r\n        <div className=\"xxs:w-full lg:w-[48%]\">\r\n          <ChartSection comparisonDrivers={comparison} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalyticsSection;\r\n","import * as React from \"react\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Highcharts from \"highcharts\";\r\nimport { multipleComparisonData } from \"../../types/types\";\r\n\r\ninterface MultipleBarChartProps {\r\n  multipleBarChart: multipleComparisonData;\r\n}\r\n\r\nconst MultipleBarChart: React.FC<MultipleBarChartProps> = ({\r\n  multipleBarChart,\r\n}) => {\r\n  const options: Highcharts.Options = {\r\n    chart: {\r\n      height: \"800\",\r\n      type: \"bar\",\r\n      marginTop: 100,\r\n    },\r\n    title: {\r\n      text: \"Comparison between all competitors according to the Points , Labs and Grid\",\r\n      align: \"left\",\r\n    },\r\n    xAxis: {\r\n      categories: multipleBarChart.xAxis,\r\n      title: {\r\n        text: null,\r\n      },\r\n      gridLineWidth: 1,\r\n      lineWidth: 0,\r\n    },\r\n    yAxis: {\r\n      min: 0,\r\n      labels: {\r\n        overflow: \"justify\",\r\n      },\r\n      gridLineWidth: 0,\r\n    },\r\n    tooltip: {\r\n      valueSuffix: \"millions\",\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        borderRadius: \"50%\",\r\n        pointWidth: 5,\r\n        dataLabels: {\r\n          enabled: true,\r\n        },\r\n        groupPadding: 0.1,\r\n      },\r\n    },\r\n    legend: {\r\n      layout: \"vertical\",\r\n      align: \"right\",\r\n      verticalAlign: \"top\",\r\n      x: 0,\r\n      y: 0,\r\n      floating: true,\r\n      borderWidth: 1,\r\n      backgroundColor: \"#FFFFFF\",\r\n      shadow: true,\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n\r\n    series: [\r\n      {\r\n        name: \"points\",\r\n        data: multipleBarChart.points,\r\n        type: \"bar\",\r\n      },\r\n      {\r\n        name: \"laps\",\r\n        data: multipleBarChart.laps,\r\n        type: \"bar\",\r\n      },\r\n      {\r\n        name: \"grid\",\r\n        data: multipleBarChart.grid,\r\n        type: \"bar\",\r\n      },\r\n    ],\r\n  };\r\n\r\n\r\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\r\n};\r\n\r\nexport default MultipleBarChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport apiService from \"../../api/apiService\";\r\nimport AnalyticsSection from \"./analyticsSection\";\r\n\r\n// Types\r\nimport {\r\n  Driver,\r\n  Constructor,\r\n  RaceDetail,\r\n  ComparisonData,\r\n  multipleComparisonData,\r\n} from \"../../types/types\";\r\n\r\n// Assets\r\nimport vrsImg from \"../../assets/3ea92f9f.jpg\";\r\nimport Loader from \"../../components/loader\";\r\nimport MultipleBarChart from \"./multipleBarChart\";\r\n\r\nconst titles = {\r\n  default: \"An Analysis of Formula 1’s Quickest Race Finishers\",\r\n};\r\n\r\nconst RaceDetails: React.FC = () => {\r\n  const { season, round } = useParams<{\r\n    season: string;\r\n    round: string | undefined;\r\n  }>();\r\n  const [raceDetails, setRaceDetails] = useState<RaceDetail[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [defaultComparisonDrivers, setDefaultComparisonDrivers] =\r\n    useState<ComparisonData | null>(null);\r\n\r\n  const [multipleBarChart, setMultipleBarChart] =\r\n    useState<multipleComparisonData | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchRaceDetails = async () => {\r\n      if (!season || !round) return;\r\n\r\n      try {\r\n        const data: any = await apiService.getRaceDetails(season, round);\r\n\r\n        setRaceDetails(data);\r\n\r\n        const finishedDriverList = data.filter(\r\n          (d: RaceDetail) => d.status === \"Finished\"\r\n        );\r\n\r\n        const xAxis: string[] = [];\r\n        const yAxis: number[] = [];\r\n\r\n        const points: number[] = [];\r\n        const laps: number[] = [];\r\n        const grid: number[] = [];\r\n\r\n        for (let index = 0; index < finishedDriverList.length; index++) {\r\n          const element = data[index];\r\n          xAxis.push(element.Driver.givenName);\r\n          yAxis.push(Number(element.Time.millis));\r\n\r\n          points.push(Number(element.points));\r\n          laps.push(Number(element.laps));\r\n          grid.push(Number(element.grid));\r\n        }\r\n\r\n        for (let index = 0; index < data.length; index++) {\r\n          const element = data[index];\r\n          xAxis.push(element.Driver.givenName);\r\n\r\n          points.push(Number(element.points));\r\n          laps.push(Number(element.laps));\r\n          grid.push(Number(element.grid));\r\n        }\r\n\r\n        setDefaultComparisonDrivers({ xAxis, yAxis, title: titles.default });\r\n        setMultipleBarChart({ xAxis, points, laps, grid });\r\n      } catch (error) {\r\n        console.error(`Failed to fetch races for season ${season}:`, error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchRaceDetails();\r\n  }, [season, round]);\r\n\r\n  if (loading || !defaultComparisonDrivers || !multipleBarChart)\r\n    return <Loader />;\r\n\r\n  return (\r\n    <div className=\"bg-[#2B2B2B] pb-8 min-100vh\">\r\n      <img src={vrsImg} alt=\"vrs\" />\r\n      <div className=\"flex flex-col gap-16 w-[90%] m-auto bg-white xxs:p-2 sm:p-8 rounded mt-4\">\r\n        <AnalyticsSection\r\n          raceDetails={raceDetails}\r\n          defaultComparisonDrivers={defaultComparisonDrivers}\r\n        />\r\n        <MultipleBarChart multipleBarChart={multipleBarChart} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceDetails;\r\n"],"names":["BASE_URL","getSeasons","async","response","fetch","json","MRData","SeasonTable","Seasons","error","console","getRacesForSeason","season","RaceTable","Races","getRaceDetails","round","Results","_ref","comparisonDrivers","options","chart","type","title","text","align","xAxis","categories","crosshair","accessibility","description","yAxis","min","tooltip","valueSuffix","plotOptions","column","pointWidth","pointPadding","borderWidth","series","name","data","_jsx","HighchartsReact","highcharts","Highcharts","code","raceDetails","defaultComparisonDrivers","team","setTeam","useState","selectedTeam","setSelectedTeam","rowClick","setRowClick","setError","globalFilter","setGlobalFilter","comparisonField","setComparisonField","comparison","setComparison","useEffect","result","map","driver","_driver$Time","id","Driver","driverId","givenName","familyName","position","nationality","Constructor","time","Time","millis","points","laps","header","className","children","_jsxs","IconField","iconPosition","InputIcon","InputText","onInput","e","target","value","placeholder","Dropdown","onChange","optionLabel","disabled","length","Button","onClick","handelCompare","forEach","element","push","Number","label","rounded","size","resetComparing","undefined","severity","DataTable","paginator","rows","selectionMode","selection","onSelectionChange","dataKey","Column","headerStyle","width","field","ChartSection","multipleBarChart","height","marginTop","gridLineWidth","lineWidth","labels","overflow","bar","borderRadius","dataLabels","enabled","groupPadding","legend","layout","verticalAlign","x","y","floating","backgroundColor","shadow","credits","grid","titles","RaceDetails","useParams","setRaceDetails","loading","setLoading","setDefaultComparisonDrivers","setMultipleBarChart","apiService","finishedDriverList","filter","d","status","index","fetchRaceDetails","src","vrsImg","alt","AnalyticsSection","MultipleBarChart","Loader"],"sourceRoot":""}